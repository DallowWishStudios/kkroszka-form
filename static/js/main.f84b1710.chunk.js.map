{"version":3,"sources":["components/RequiredLabel.js","components/Input.js","components/InputCam.js","components/Form.js","App.js","index.js"],"names":["RequiredLabel","required","className","Input","name","label","type","onInputChange","reset","inputRef","useRef","current","value","requiredObj","htmlFor","ref","id","onChange","e","target","statusMessages","InputCam","onCameraRecord","getStatus","status","videoBlob","window","console","log","recordingLength","INIT","PREVIEW","ERROR","options","render","props","disabled","isWebcamOn","isPreview","onClick","openCamera","closeCamera","retake","isRecording","start","stop","download","videoSources","Form","useState","firstName","lastName","age","file1","file2","video","formData","setFormData","shouldBeVideoFilled","setShouldBeVideoFilled","videoSource","setVideoSource","isSubmitted","setIsSubmitted","submitState","setSubmitState","useEffect","data","formDataToSend","FormData","key","hasOwnProperty","inputProps","append","getFormData","fetch","method","body","then","res","a","json","ok","submitted","error","msg","catch","err","message","files","file","newFormData","setInputData","onSubmit","preventDefault","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f84b1710.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const RequiredLabel = ({ required }) => {\r\n    return (\r\n        <>\r\n            { required ? <span className='requiredLabel'> - required</span> : null }\r\n        </>\r\n    )\r\n}\r\n","import React, { useRef } from 'react'\r\nimport { RequiredLabel } from './RequiredLabel'\r\nimport './Input.css'\r\n\r\nexport const Input = ({ name='', label='label', type='input', onInputChange=()=>{}, required=true, reset=false }) => {\r\n    const inputRef = useRef(null)\r\n    if(reset && inputRef.current) inputRef.current.value = ''\r\n\r\n    const handleInputChange = (e) => {\r\n        const target = e.target\r\n        onInputChange(target)\r\n    }\r\n\r\n    const requiredObj = required ? { required: 'required' } : {}\r\n\r\n    return (\r\n        <div className='inputContainer'>\r\n            <label className='bold' htmlFor={name}> {label} <RequiredLabel required={required} /> </label>\r\n            <input ref={inputRef} type={type} name={name} id={name} onChange={handleInputChange} {...requiredObj} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Webcam from 'react-record-webcam'\r\nimport './InputCam.css'\r\n\r\nconst statusMessages = {\r\n  INIT: \"Starting camera ...\",\r\n  PREVIEW: \"Preview\",\r\n  ERROR: \"Error occured while opening camera\"\r\n}\r\n\r\nexport const InputCam = ({ label, onCameraRecord, reset=false }) => {\r\n\r\n    const handleStatus = (status) => {\r\n        if(status === statusMessages.PREVIEW){\r\n          const videoBlob = window.videoBlob\r\n          console.log('window.videoBlob', videoBlob);\r\n          onCameraRecord(videoBlob)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='InputCam'>\r\n            <label className='bold'> {label} </label>\r\n \r\n            <Webcam\r\n                getStatus={handleStatus}\r\n                recordingLength={10}\r\n                statusMessages={{\r\n                    INIT: statusMessages.INIT,\r\n                    PREVIEW: statusMessages.PREVIEW,\r\n                    ERROR: statusMessages.ERROR,\r\n                    // CLOSED: \"Camera is closed ❌\",\r\n                    // OPEN: \"Camera is open 🎥\",\r\n                    // RECORDING: \"Recording ... ⏺\",\r\n                }}\r\n\r\n                options={{\r\n                    type: 'video'\r\n                }}\r\n\r\n                render={(props) => {\r\n                    return (\r\n                      <div className=\"webcam__render-wrapper\">\r\n                        <h2 className=\"webcam__render-status\">{props.status}</h2>\r\n                        <div className=\"webcam__render-action-wrapper\">\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={props.isWebcamOn || props.isPreview}\r\n                            onClick={props.openCamera}\r\n                            type='button'\r\n                            >\r\n                            Open camera\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={!props.isWebcamOn}\r\n                            onClick={props.closeCamera}\r\n                            type='button'\r\n                          >\r\n                            Close camera\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={!props.isPreview}\r\n                            onClick={props.retake}\r\n                            type='button'\r\n                          >\r\n                            Retake\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={\r\n                              !props.isWebcamOn || props.isRecording || props.isPreview\r\n                            }\r\n                            onClick={props.start}\r\n                            type='button'\r\n                          >\r\n                            Start recording\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={!props.isRecording}\r\n                            onClick={props.stop}\r\n                            type='button'\r\n                          >\r\n                            Stop recording\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={!props.isPreview}\r\n                            onClick={props.download}\r\n                            type='button'\r\n                          >\r\n                            Download\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Input } from './Input'\r\nimport { InputCam } from './InputCam'\r\nimport { RequiredLabel } from './RequiredLabel'\r\nimport './Form.css'\r\n\r\nconst videoSources = {\r\n    CAMERA: 'camera',\r\n    FILE: 'file'\r\n}\r\n// const backendUrl = 'http://localhost:3003/forms'\r\nconst backendUrl = 'https://kkroszka-form.herokuapp.com/forms'\r\n\r\nexport const Form = () => {\r\n    const [formData, setFormData] = useState({\r\n        firstName: {},\r\n        lastName: {},\r\n        age: {},\r\n        file1: {},\r\n        file2: {},\r\n        video: {},\r\n    })\r\n    const [shouldBeVideoFilled, setShouldBeVideoFilled] = useState(false)\r\n    const [videoSource, setVideoSource] = useState(null)\r\n    const [isSubmitted, setIsSubmitted] = useState(false)\r\n    const [submitState, setSubmitState] = useState({})\r\n\r\n    const getFormData = () => {\r\n        const formDataToSend = new FormData()\r\n\r\n        for (const key in formData) {\r\n            if (formData.hasOwnProperty(key)) {\r\n                const inputProps = formData[key];\r\n\r\n                if(inputProps.value){\r\n                    formDataToSend.append(key, inputProps.value)\r\n                } else if(key === 'video') {\r\n                    setShouldBeVideoFilled(true)\r\n                    return null\r\n                }\r\n            }\r\n        }\r\n\r\n        return formDataToSend\r\n    }\r\n\r\n    const sendFormData = (formDataToSend) => {\r\n\r\n        fetch(backendUrl, {\r\n            method: 'post',\r\n            body: formDataToSend\r\n        }).then(async res => {\r\n            console.log(res);\r\n            const data = await res.json()\r\n            console.log(data);\r\n            if(res.ok){\r\n                setSubmitState({\r\n                    submitted: 'Form submitted!'\r\n                })\r\n            } else {\r\n                setSubmitState({\r\n                    error: data.msg\r\n                })\r\n                setIsSubmitted(false)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            \r\n            setSubmitState({\r\n                error: err && err.message ? err.message : 'unknown'\r\n            })\r\n            setIsSubmitted(false)\r\n        })\r\n    }\r\n\r\n    const trySendFormData = () => {\r\n        if(isSubmitted){\r\n            const data = getFormData()\r\n            if(data) \r\n                sendFormData(data)\r\n            else \r\n                setIsSubmitted(false) \r\n        }\r\n    }\r\n\r\n    useEffect(trySendFormData, [isSubmitted])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if(!shouldBeVideoFilled) setIsSubmitted(true)\r\n    }\r\n\r\n    const setInputData = (target) => {\r\n        const { value, name, files } = target\r\n        const file = files ? files[0] : null\r\n        const newFormData = {\r\n            type: file ? 'file' : 'text',\r\n            value: file || value\r\n        }\r\n        setFormData({ ...formData, [name]: newFormData })\r\n        \r\n        if(name === 'video'){\r\n            setVideoSource(videoSources.FILE)\r\n            setShouldBeVideoFilled(false)\r\n        }\r\n    }\r\n\r\n    const onInputChange = (target) => {\r\n        setInputData(target)\r\n    }\r\n\r\n    const onCameraRecord = (videoBlob) => {\r\n        const newFormData = {\r\n            type: 'file',\r\n            value: videoBlob\r\n        }\r\n        setFormData({ ...formData, video: newFormData })\r\n        setVideoSource(videoSources.CAMERA)\r\n        setShouldBeVideoFilled(false)\r\n    }\r\n\r\n    const handleRemoveVideo = () => {\r\n        setFormData({ ...formData, video: {} })\r\n        setVideoSource(null)\r\n        setShouldBeVideoFilled(false)\r\n    }\r\n\r\n    console.log({submitState});\r\n\r\n    return (\r\n        <div className='formContainer'>\r\n            <form onSubmit={ handleSubmit }>\r\n                <div className={`overlay ${ isSubmitted ? 'active' : '' }`}></div>\r\n                <Input name='firstName' label='first name' onInputChange={onInputChange} />\r\n                <Input name='lastName' label='last name' onInputChange={onInputChange}/>\r\n                <Input name='age' label='age' type='number' onInputChange={onInputChange} />\r\n                <Input type='file' name='file1' label='file1' onInputChange={onInputChange} />\r\n                <Input type='file' name='file2' label='file2' required={false} onInputChange={onInputChange} />\r\n                <div className='videoInput inputContainer'>\r\n                    <label className='bold'>Record or upload a video <RequiredLabel required={true} /></label>\r\n                    <div className={(() => {\r\n                        const classes = `content ${ shouldBeVideoFilled ? 'shouldBeFilled' : '' }`\r\n                        return classes\r\n                    })()}>\r\n                        { videoSource === videoSources.FILE\r\n                            ? null\r\n                            : <InputCam name='video' label='camera' onCameraRecord={onCameraRecord} reset={ videoSource ? false : true } /> \r\n                        }\r\n                        { videoSource ? null : <span className='videoOr'> OR </span> }\r\n                        { videoSource === videoSources.CAMERA \r\n                            ? null\r\n                            : <Input type='file' name='video' label='video' onInputChange={onInputChange} required={false} reset={ videoSource ? false : true } /> \r\n                        }\r\n                        { videoSource ? <button type='button' onClick={handleRemoveVideo}>Remove video</button> : null }\r\n                    </div>\r\n                </div>\r\n                <button className='submitBtn' type=\"submit\">Submit</button>\r\n            </form>\r\n            <div className=\"submitMsg\">\r\n                { submitState.submitted || (submitState.error ? <span className='error'><span className=\"bold\">Submiting error: </span> {submitState.error} </span> : null) || null }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport { Form } from './components/Form';\n\nfunction App() {\n  return (\n    <main>\n      <Form></Form>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}