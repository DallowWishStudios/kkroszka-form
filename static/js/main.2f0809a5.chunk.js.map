{"version":3,"sources":["components/RequiredLabel.js","components/Input.js","components/InputCam.js","components/Form.js","App.js","index.js"],"names":["RequiredLabel","required","className","Input","name","label","type","onInputChange","inputProps","htmlFor","id","onChange","e","target","statusMessages","InputCam","onCameraRecord","getStatus","status","videoBlob","window","console","log","recordingLength","INIT","PREVIEW","ERROR","options","render","props","disabled","isWebcamOn","isPreview","onClick","openCamera","closeCamera","retake","isRecording","start","stop","download","Form","useState","firstName","lastName","age","file1","file2","video","formData","setFormData","shouldBeVideoFilled","setShouldBeVideoFilled","value","files","file","newFormData","setInputData","onSubmit","preventDefault","formDataToSend","FormData","key","hasOwnProperty","append","fetch","method","body","then","res","a","catch","err","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"0UAEaA,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,OACI,mCACMA,EAAW,sBAAMC,UAAU,gBAAhB,yBAAqD,QCDjEC,G,MAAQ,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,MAA0D,IAAnDC,YAAmD,MAA9C,QAA8C,EAArCC,EAAqC,EAArCA,cAAqC,IAAtBN,gBAAsB,SAU9EO,EAAa,CACfP,SAAUA,EAAW,WAAa,MAGtC,OACI,sBAAKC,UAAU,iBAAf,UACI,wBAAOA,UAAU,OAAOO,QAASL,EAAjC,cAAyCC,EAAzC,IAAgD,cAAC,EAAD,CAAeJ,SAAUA,IAAzE,OACA,mCAAOK,KAAMA,EAAMF,KAAMA,EAAMM,GAAIN,EAAMO,SAdvB,SAACC,GAEvB,IAAMC,EAASD,EAAEC,OAEjBN,EAAcM,KAUgEL,S,iBCjBhFM,G,MACE,uBADFA,EAEK,UAFLA,EAGG,qCAGIC,EAAW,SAAC,GAAoC,EAAlCX,KAAmC,IAA7BC,EAA4B,EAA5BA,MAAOW,EAAqB,EAArBA,eAUpC,OACI,sBAAKd,UAAU,WAAf,UACI,wBAAOA,UAAU,OAAjB,cAA0BG,EAA1B,OAEA,cAAC,IAAD,CACIY,UAbS,SAACC,GAClB,GAAGA,IAAWJ,EAAuB,CACnC,IAAMK,EAAYC,OAAOD,UACzBE,QAAQC,IAAI,mBAAoBH,GAChCH,EAAeG,KAUTI,gBAAiB,GACjBT,eAAgB,CACZU,KAAMV,EACNW,QAASX,EACTY,MAAOZ,GAMXa,QAAS,CACLrB,KAAM,SAGVsB,OAAQ,SAACC,GAEL,OACE,sBAAK3B,UAAU,yBAAf,UACE,oBAAIA,UAAU,wBAAd,SAAuC2B,EAAMX,SAC7C,sBAAKhB,UAAU,gCAAf,UACE,wBACEA,UAAU,+BACV4B,SAAUD,EAAME,YAAcF,EAAMG,UACpCC,QAASJ,EAAMK,WACf5B,KAAK,SAJP,yBAQA,wBACEJ,UAAU,+BACV4B,UAAWD,EAAME,WACjBE,QAASJ,EAAMM,YAHjB,0BAOA,wBACEjC,UAAU,+BACV4B,UAAWD,EAAMG,UACjBC,QAASJ,EAAMO,OACf9B,KAAK,SAJP,oBAQA,wBACEJ,UAAU,+BACV4B,UACGD,EAAME,YAAcF,EAAMQ,aAAeR,EAAMG,UAElDC,QAASJ,EAAMS,MACfhC,KAAK,SANP,6BAUA,wBACEJ,UAAU,+BACV4B,UAAWD,EAAMQ,YACjBJ,QAASJ,EAAMU,KACfjC,KAAK,SAJP,4BAQA,wBACEJ,UAAU,+BACV4B,UAAWD,EAAMG,UACjBC,QACSJ,EAAMW,SAEflC,KAAK,SANP,mCCtEbmC,G,MAAO,WAAO,IAAD,EACUC,mBAAS,CACrCC,UAAW,GACXC,SAAU,GACVC,IAAK,GACLC,MAAO,GACPC,MAAO,GACPC,MAAO,KAPW,mBACfC,EADe,KACLC,EADK,OASgCR,oBAAS,GATzC,mBASfS,EATe,KASMC,EATN,KAkDhB7C,EAAgB,SAACM,IAVF,SAACA,GAAY,IACtBwC,EAAuBxC,EAAvBwC,MAAOjD,EAAgBS,EAAhBT,KAAMkD,EAAUzC,EAAVyC,MACfC,EAAOD,EAAQA,EAAM,GAAK,KAC1BE,EAAc,CAChBlD,KAAMiD,EAAO,OAAS,OACtBF,MAAOE,GAAQF,GAEnBH,EAAY,2BAAKD,GAAN,kBAAiB7C,EAAOoD,KAInCC,CAAa5C,IAWjB,OACI,qBAAKX,UAAU,gBAAf,SACI,uBAAMwD,SArDO,SAAC9C,GAClBA,EAAE+C,iBACFtC,QAAQC,IAAI2B,GACZ,IAAMW,EAAiB,IAAIC,SAE3B,IAAK,IAAMC,KAAOb,EACd,GAAIA,EAASc,eAAeD,GAAM,CAC9B,IAAMtD,EAAayC,EAASa,GAEzBtD,EAAW6C,MACVO,EAAeI,OAAOF,EAAKtD,EAAW6C,OACxB,UAARS,GACNV,GAAuB,GAKnCa,MAAM,8BAA+B,CACjCC,OAAQ,OACRC,KAAMP,IACPQ,KAHH,uCAGQ,WAAMC,GAAN,SAAAC,EAAA,sDACJjD,QAAQC,IAAI+C,GADR,2CAHR,uDAOCE,OAAM,SAAAC,GACHnD,QAAQC,IAAIkD,OA4BZ,UACI,cAAC,EAAD,CAAOpE,KAAK,YAAYC,MAAM,aAAaE,cAAeA,IAC1D,cAAC,EAAD,CAAOH,KAAK,WAAWC,MAAM,YAAYE,cAAeA,IACxD,cAAC,EAAD,CAAOH,KAAK,MAAMC,MAAM,MAAMC,KAAK,SAASC,cAAeA,IAC3D,cAAC,EAAD,CAAOD,KAAK,OAAOF,KAAK,QAAQC,MAAM,QAAQE,cAAeA,IAC7D,cAAC,EAAD,CAAOD,KAAK,OAAOF,KAAK,QAAQC,MAAM,QAAQJ,UAAU,EAAOM,cAAeA,IAC9E,sBAAKL,UAAU,4BAAf,UACI,uBAAOA,UAAU,OAAjB,sCACA,sBAAKA,UAAS,kBAAciD,EAAsB,iBAAmB,IAArE,UACI,cAAC,EAAD,CAAU/C,KAAK,QAAQC,MAAM,SAASW,eAnBnC,SAACG,GACpB,IAAMqC,EAAc,CAChBlD,KAAM,OACN+C,MAAOlC,GAEX+B,EAAY,2BAAKD,GAAN,IAAgBD,MAAOQ,QAelB,sBAAMtD,UAAU,UAAhB,kBACA,cAAC,EAAD,CAAOI,KAAK,OAAOF,KAAK,QAAQC,MAAM,QAAQE,cAAeA,EAAeN,UAAU,UAG9F,wBAAQC,UAAU,YAAYI,KAAK,SAAnC,2BCnFDmE,MARf,WACE,OACE,+BACE,cAAC,EAAD,OCFNC,IAAS9C,OACP,cAAC,IAAM+C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2f0809a5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const RequiredLabel = ({ required }) => {\r\n    return (\r\n        <>\r\n            { required ? <span className='requiredLabel'> - required</span> : null }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { RequiredLabel } from './RequiredLabel'\r\nimport './Input.css'\r\n\r\nexport const Input = ({ name, label, type='input', onInputChange, required = true }) => {\r\n    // const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        // const { value, name } = e.target\r\n        const target = e.target\r\n        // setInputValue(value)\r\n        onInputChange(target)\r\n    }\r\n\r\n    const inputProps = {\r\n        required: required ? 'required' : null\r\n    }\r\n\r\n    return (\r\n        <div className='inputContainer'>\r\n            <label className='bold' htmlFor={name}> {label} <RequiredLabel required={required} /> </label>\r\n            <input type={type} name={name} id={name} onChange={handleInputChange} {...inputProps} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Webcam from 'react-record-webcam'\r\nimport './InputCam.css'\r\n\r\nconst statusMessages = {\r\n  INIT: \"Starting camera ...\",\r\n  PREVIEW: \"Preview\",\r\n  ERROR: \"Error occured while opening camera\"\r\n}\r\n\r\nexport const InputCam = ({ name, label, onCameraRecord }) => {\r\n\r\n    const handleStatus = (status) => {\r\n        if(status === statusMessages.PREVIEW){\r\n          const videoBlob = window.videoBlob\r\n          console.log('window.videoBlob', videoBlob);\r\n          onCameraRecord(videoBlob)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='InputCam'>\r\n            <label className='bold'> {label} </label>\r\n \r\n            <Webcam\r\n                getStatus={handleStatus}\r\n                recordingLength={10}\r\n                statusMessages={{\r\n                    INIT: statusMessages.INIT,\r\n                    PREVIEW: statusMessages.PREVIEW,\r\n                    ERROR: statusMessages.ERROR,\r\n                    // CLOSED: \"Camera is closed ❌\",\r\n                    // OPEN: \"Camera is open 🎥\",\r\n                    // RECORDING: \"Recording ... ⏺\",\r\n                }}\r\n\r\n                options={{\r\n                    type: 'video'\r\n                }}\r\n\r\n                render={(props) => {\r\n\r\n                    return (\r\n                      <div className=\"webcam__render-wrapper\">\r\n                        <h2 className=\"webcam__render-status\">{props.status}</h2>\r\n                        <div className=\"webcam__render-action-wrapper\">\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={props.isWebcamOn || props.isPreview}\r\n                            onClick={props.openCamera}\r\n                            type='button'\r\n                          >\r\n                            Open camera\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={!props.isWebcamOn}\r\n                            onClick={props.closeCamera}\r\n                          >\r\n                            Close camera\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={!props.isPreview}\r\n                            onClick={props.retake}\r\n                            type='button'\r\n                          >\r\n                            Retake\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={\r\n                              !props.isWebcamOn || props.isRecording || props.isPreview\r\n                            }\r\n                            onClick={props.start}\r\n                            type='button'\r\n                          >\r\n                            Start recording\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={!props.isRecording}\r\n                            onClick={props.stop}\r\n                            type='button'\r\n                          >\r\n                            Stop recording\r\n                          </button>\r\n                          <button\r\n                            className=\"webcam__render-action-button\"\r\n                            disabled={!props.isPreview}\r\n                            onClick={(()=>{ \r\n                              return props.download\r\n                            })()}\r\n                            type='button'\r\n                          >\r\n                            Download\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Input } from './Input'\r\nimport { InputCam } from './InputCam'\r\nimport './Form.css'\r\n\r\n// const mbSize = 1048576\r\n// const readFile = (name, file) => {\r\n//     // Check if the file is an image.\r\n//     if (file.type && file.type.indexOf('image') === -1) {\r\n//       console.log('File is not an image.', file.type, file);\r\n//     }\r\n\r\n//     const formData = new FormData()\r\n\r\n//     formData.append(name, file)\r\n// }\r\n\r\nexport const Form = () => {\r\n    const [formData, setFormData] = useState({\r\n        firstName: {},\r\n        lastName: {},\r\n        age: {},\r\n        file1: {},\r\n        file2: {},\r\n        video: {},\r\n    })\r\n    const [shouldBeVideoFilled, setShouldBeVideoFilled] = useState(false)\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        console.log(formData);\r\n        const formDataToSend = new FormData()\r\n\r\n        for (const key in formData) {\r\n            if (formData.hasOwnProperty(key)) {\r\n                const inputProps = formData[key];\r\n\r\n                if(inputProps.value){\r\n                    formDataToSend.append(key, inputProps.value)\r\n                } else if(key === 'video') {\r\n                    setShouldBeVideoFilled(true)\r\n                }\r\n            }\r\n        }\r\n\r\n        fetch('http://localhost:3003/forms', {\r\n            method: 'post',\r\n            body: formDataToSend\r\n        }).then(async res => {\r\n            console.log(res);\r\n            // const data = await res.json()\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const setInputData = (target) => {\r\n        const { value, name, files } = target\r\n        const file = files ? files[0] : null\r\n        const newFormData = {\r\n            type: file ? 'file' : 'text',\r\n            value: file || value\r\n        }\r\n        setFormData({ ...formData, [name]: newFormData })\r\n    }\r\n\r\n    const onInputChange = (target) => {\r\n        setInputData(target)\r\n    }\r\n\r\n    const onCameraRecord = (videoBlob) => {\r\n        const newFormData = {\r\n            type: 'file',\r\n            value: videoBlob\r\n        }\r\n        setFormData({ ...formData, video: newFormData })\r\n    }\r\n\r\n    return (\r\n        <div className='formContainer'>\r\n            <form onSubmit={ handleSubmit }>\r\n                <Input name='firstName' label='first name' onInputChange={onInputChange} />\r\n                <Input name='lastName' label='last name' onInputChange={onInputChange}/>\r\n                <Input name='age' label='age' type='number' onInputChange={onInputChange} />\r\n                <Input type='file' name='file1' label='file1' onInputChange={onInputChange} />\r\n                <Input type='file' name='file2' label='file2' required={false} onInputChange={onInputChange} />\r\n                <div className='videoInput inputContainer'>\r\n                    <label className='bold'>Record or upload a video</label>\r\n                    <div className={`content ${ shouldBeVideoFilled ? 'shouldBeFilled' : '' }`}>\r\n                        <InputCam name='video' label='camera' onCameraRecord={onCameraRecord} />\r\n                        <span className='videoOr'> OR </span> \r\n                        <Input type='file' name='video' label='video' onInputChange={onInputChange} required={false} />\r\n                    </div>\r\n                </div>\r\n                <button className='submitBtn' type=\"submit\">Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport { Form } from './components/Form';\n\nfunction App() {\n  return (\n    <main>\n      <Form></Form>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}